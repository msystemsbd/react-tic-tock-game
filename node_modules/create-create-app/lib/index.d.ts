import { CommonOptions, ExecaChildProcess } from 'execa';

interface OptionData {
    type: 'input' | 'number' | 'confirm' | 'list' | 'rawlist' | 'expand' | 'checkbox' | 'password' | 'editor';
    describe: string;
    default?: string | number | boolean | any[];
    prompt?: 'always' | 'never' | 'if-no-arg' | 'if-empty';
    choices?: (string | {
        name: string;
        value: any;
    })[];
}
interface Option {
    [key: string]: OptionData | {
        default: boolean;
    };
}
interface Options {
    templateRoot: string;
    promptForTemplate?: boolean;
    modifyName?: (name: string) => string | Promise<string>;
    extra?: Option;
    caveat?: string | ((options: AfterHookOptions) => string | void | Promise<string | void>);
    after?: (options: AfterHookOptions) => void | Promise<void>;
}
interface View {
    name: string;
    description: string;
    author: string;
    email: string;
    contact: string;
    license: string;
    [key: string]: string | number | boolean | any[];
}
interface AfterHookOptions {
    name: string;
    packageDir: string;
    template: string;
    templateDir: string;
    year: number;
    answers: Omit<View, 'name'>;
    run: (command: string, options?: CommonOptions<string>) => ExecaChildProcess<string>;
    installNpmPackage: (packageName: string) => Promise<void>;
}
declare class CLIError extends Error {
    constructor(message: string);
}
declare function create(appName: string, options: Options): Promise<void>;

export { AfterHookOptions, CLIError, Option, OptionData, Options, View, create };
