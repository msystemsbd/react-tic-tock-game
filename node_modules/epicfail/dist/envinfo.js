"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.genEnv = void 0;
const chalk_1 = __importDefault(require("chalk"));
const envinfo_1 = require("envinfo");
const term_1 = require("./term");
function genEnv(envinfo, pkg) {
    return __awaiter(this, void 0, void 0, function* () {
        const env = yield envinfo_1.run(envinfo !== null && envinfo !== void 0 ? envinfo : {
            System: ['OS'],
            Binaries: ['Node'],
        }, {
            json: true,
            showNotFound: true,
        });
        const res = [];
        res.push(term_1.makeTitle(chalk_1.default.green, 'Environment'));
        res.push(`- ${pkg.name}: ${pkg.version}`);
        res.push(Object.entries(JSON.parse(env))
            .reduce((s, i) => [
            ...s,
            ...Object.entries(i[1]).map(([k, v]) => [`${i[0]} > ${k}`, v]),
        ], [])
            .map(([k, v]) => `- ${k}: ${parseEnvInfo(v)}`)
            .join('\n'));
        return chalk_1.default.green(res.join('\n'));
    });
}
exports.genEnv = genEnv;
function parseEnvInfo(v) {
    if (typeof v === 'string') {
        return v;
    }
    else if (typeof v === 'object' && 'version' in v) {
        return `${v.version}${v.path ? ` - ${v.path}` : ''}`;
    }
    else if (Array.isArray(v)) {
        return v.join(', ');
    }
    else {
        return JSON.stringify(v);
    }
}
